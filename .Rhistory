hello <- function() {
print("Hello, world!")
}
devtools::load_all(".")
library(TEST)
library(TEST)
TEST::compare_vcfs_GT()
??TEST::compare_vcfs_GT()
library(devtools)
check()
library(roxygen2)
compare_vcfs_GT()
library(TEST)
document()
library(TEST)
compare_vcfs_GT()
??compare_vcfs_GT()
??compare_vcfs_GT()
??compare_vcfs_GT()
library(TEST)
devtools::load_all(".")
??compare_vcfs_GT()
??compare_vcfs_GT()
library(TEST)
library(TEST)
??compare_vcfs_GT()
library(TEST)
??compare_vcfs_GT()
install_github("shankarkshakya/mypackage")
library(mypackage)
install_github("shankarkshakya/mypackage")
require::vcfR
library(vcfR)
vcf <- read.vcfR("vcf")
vcfR_to_012 <- function(vcf){
require::vcfR
vcf <- read.vcfR("vcf")
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","1",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","0.5",gt2b)
gt <- gt2c
vcf@gt <- gt
return(vcf)
}
library(roxygen2)
devtools::document()
library(TEST)
roxygen2::roxygenise()
roxygenise("TEST")
roxygenise()
library(TEST)
??TEST::vcfR_to_012()
library(TEST)
??vcfR_to_012
#' Convert vcfR to 012 format
#'
#' @param vcf vcf file
#'
#' @return vcf file with new GT format
#' @export
#'
#' @examples
vcfR_to_012 <- function(vcf){
require::vcfR
vcf <- read.vcfR("vcf")
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","2",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","1",gt2b)
gt <- gt2c
vcf@gt <- gt
return(vcf)
}
library(TEST)
vcfR_to_012("vcf1.test.gz")
#' Convert vcfR to 012 format
#'
#' @param vcf vcf file
#'
#' @return vcf file with new GT format
#' @export
#'
#' @examples
vcfR_to_012 <- function(vcf){
library(vcfR)
vcf <- read.vcfR("vcf")
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","2",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","1",gt2b)
gt <- gt2c
vcf@gt <- gt
return(vcf)
}
vcfR_to_012("vcf1.test.gz")
#' Convert vcfR to 012 format
#'
#' @param vcf vcf file
#'
#' @return vcf file with new GT format
#' @export
#'
#' @examples
vcfR_to_012 <- function(vcf){
library(vcfR)
vcf <- read.vcfR(vcf)
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","2",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","1",gt2b)
gt <- gt2c
vcf@gt <- gt
return(vcf)
}
vcfR_to_012("vcf1.test.gz")
vcf@gt
p <- vcfR_to_012("vcf1.test.gz")
p
p@gt
find_unique_GT_per_sample("vcf1.test.gz")
library(vcfR)
read.vcfR("vcf1.test.gz")
p <- read.vcfR("vcf1.test.gz")
colnames(p)
colnames(p@gt)
colnames(p@gt)[2:11]
colnames(p@gt)[2:11] <- paste0("Sample_", 1:10)
p
write.vcf(p, "Mytest.vcf.gz")
vcf <- read.vcfR("Mytest.vcf.gz")
gt <- extract.gt(vcf, "GT", return.alleles = TRUE)
vcf <- vcf[which(!duplicated(gt)), ]
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","1",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","0.5",gt2b)
gt <- gt2c
count_list <- apply(gt, 1, table)
my_min_list <- vector("list", length = length(count_list))
for(i in 1:length(count_list)) {
ith_item <- count_list[[i]]
my_min_list[[i]] <- min(ith_item)
}
q <- gt[which(unlist(lapply(my_min_list, function(x) x == 1))), ]
q <- data.frame(q, stringsAsFactors = FALSE)
test <- q
my_unique <- vector("list", length = nrow(test))
names(my_unique) <- rownames(test)
# Extract unique SNPs per sample
for (i in 1:nrow(test)){
p <- data.frame(apply(test[i,], 1, table))
index <- which(p[,1] == 1)
my_unique[[i]] <- colnames(test[which(test[i,] == rownames(p)[index])])
}
test
vcf
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","1",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","0.5",gt2b)
gt <- gt2c
gt
count_list <- apply(gt, 1, table)
my_min_list <- vector("list", length = length(count_list))
i <- 1
ith_item <- count_list[[i]]
my_min_list[[i]] <- min(ith_item)
my_min_list
ith_item
for(i in 1:length(count_list)) {
ith_item <- count_list[[i]]
my_min_list[[i]] <- min(ith_item)
}
my_min_list
vcf <- read.vcfR("vcf1.test.gz")
gt <- extract.gt(vcf, "GT", return.alleles = TRUE)
vcf <- vcf[which(!duplicated(gt)), ]
gt <- extract.gt(vcf, "GT")
gt2a <- apply(gt,2, function(x) gsub("1[/|]1","1",x))
gt2b <- gsub("0[/|]0","0",gt2a)
gt2c <- gsub("[10][/|][10]","0.5",gt2b)
gt <- gt2c
count_list <- apply(gt, 1, table)
my_min_list <- vector("list", length = length(count_list))
for(i in 1:length(count_list)) {
ith_item <- count_list[[i]]
my_min_list[[i]] <- min(ith_item)
}
q <- gt[which(unlist(lapply(my_min_list, function(x) x == 1))), ]
q <- data.frame(q, stringsAsFactors = FALSE)
q
vcf
gt
count_list <- apply(gt, 1, table)
my_min_list <- vector("list", length = length(count_list))
my_min_list
for(i in 1:length(count_list)) {
ith_item <- count_list[[i]]
my_min_list[[i]] <- min(ith_item)
}
my_min_list
i <- 1
ith_item <- count_list[[i]]
ith_item
